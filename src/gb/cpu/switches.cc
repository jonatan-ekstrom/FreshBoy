#include "cpu.h"

namespace gb {

bool Cpu_::Execute(const u8 opcode) {
    switch (opcode) {
        case 0x00: return Opcode_00();
        case 0x01: return Opcode_01();
        case 0x02: return Opcode_02();
        case 0x03: return Opcode_03();
        case 0x04: return Opcode_04();
        case 0x05: return Opcode_05();
        case 0x06: return Opcode_06();
        case 0x07: return Opcode_07();
        case 0x08: return Opcode_08();
        case 0x09: return Opcode_09();
        case 0x0A: return Opcode_0A();
        case 0x0B: return Opcode_0B();
        case 0x0C: return Opcode_0C();
        case 0x0D: return Opcode_0D();
        case 0x0E: return Opcode_0E();
        case 0x0F: return Opcode_0F();
        case 0x10: return Opcode_10();
        case 0x11: return Opcode_11();
        case 0x12: return Opcode_12();
        case 0x13: return Opcode_13();
        case 0x14: return Opcode_14();
        case 0x15: return Opcode_15();
        case 0x16: return Opcode_16();
        case 0x17: return Opcode_17();
        case 0x18: return Opcode_18();
        case 0x19: return Opcode_19();
        case 0x1A: return Opcode_1A();
        case 0x1B: return Opcode_1B();
        case 0x1C: return Opcode_1C();
        case 0x1D: return Opcode_1D();
        case 0x1E: return Opcode_1E();
        case 0x1F: return Opcode_1F();
        case 0x20: return Opcode_20();
        case 0x21: return Opcode_21();
        case 0x22: return Opcode_22();
        case 0x23: return Opcode_23();
        case 0x24: return Opcode_24();
        case 0x25: return Opcode_25();
        case 0x26: return Opcode_26();
        case 0x27: return Opcode_27();
        case 0x28: return Opcode_28();
        case 0x29: return Opcode_29();
        case 0x2A: return Opcode_2A();
        case 0x2B: return Opcode_2B();
        case 0x2C: return Opcode_2C();
        case 0x2D: return Opcode_2D();
        case 0x2E: return Opcode_2E();
        case 0x2F: return Opcode_2F();
        case 0x30: return Opcode_30();
        case 0x31: return Opcode_31();
        case 0x32: return Opcode_32();
        case 0x33: return Opcode_33();
        case 0x34: return Opcode_34();
        case 0x35: return Opcode_35();
        case 0x36: return Opcode_36();
        case 0x37: return Opcode_37();
        case 0x38: return Opcode_38();
        case 0x39: return Opcode_39();
        case 0x3A: return Opcode_3A();
        case 0x3B: return Opcode_3B();
        case 0x3C: return Opcode_3C();
        case 0x3D: return Opcode_3D();
        case 0x3E: return Opcode_3E();
        case 0x3F: return Opcode_3F();
        case 0x40: return Opcode_40();
        case 0x41: return Opcode_41();
        case 0x42: return Opcode_42();
        case 0x43: return Opcode_43();
        case 0x44: return Opcode_44();
        case 0x45: return Opcode_45();
        case 0x46: return Opcode_46();
        case 0x47: return Opcode_47();
        case 0x48: return Opcode_48();
        case 0x49: return Opcode_49();
        case 0x4A: return Opcode_4A();
        case 0x4B: return Opcode_4B();
        case 0x4C: return Opcode_4C();
        case 0x4D: return Opcode_4D();
        case 0x4E: return Opcode_4E();
        case 0x4F: return Opcode_4F();
        case 0x50: return Opcode_50();
        case 0x51: return Opcode_51();
        case 0x52: return Opcode_52();
        case 0x53: return Opcode_53();
        case 0x54: return Opcode_54();
        case 0x55: return Opcode_55();
        case 0x56: return Opcode_56();
        case 0x57: return Opcode_57();
        case 0x58: return Opcode_58();
        case 0x59: return Opcode_59();
        case 0x5A: return Opcode_5A();
        case 0x5B: return Opcode_5B();
        case 0x5C: return Opcode_5C();
        case 0x5D: return Opcode_5D();
        case 0x5E: return Opcode_5E();
        case 0x5F: return Opcode_5F();
        case 0x60: return Opcode_60();
        case 0x61: return Opcode_61();
        case 0x62: return Opcode_62();
        case 0x63: return Opcode_63();
        case 0x64: return Opcode_64();
        case 0x65: return Opcode_65();
        case 0x66: return Opcode_66();
        case 0x67: return Opcode_67();
        case 0x68: return Opcode_68();
        case 0x69: return Opcode_69();
        case 0x6A: return Opcode_6A();
        case 0x6B: return Opcode_6B();
        case 0x6C: return Opcode_6C();
        case 0x6D: return Opcode_6D();
        case 0x6E: return Opcode_6E();
        case 0x6F: return Opcode_6F();
        case 0x70: return Opcode_70();
        case 0x71: return Opcode_71();
        case 0x72: return Opcode_72();
        case 0x73: return Opcode_73();
        case 0x74: return Opcode_74();
        case 0x75: return Opcode_75();
        case 0x76: return Opcode_76();
        case 0x77: return Opcode_77();
        case 0x78: return Opcode_78();
        case 0x79: return Opcode_79();
        case 0x7A: return Opcode_7A();
        case 0x7B: return Opcode_7B();
        case 0x7C: return Opcode_7C();
        case 0x7D: return Opcode_7D();
        case 0x7E: return Opcode_7E();
        case 0x7F: return Opcode_7F();
        case 0x80: return Opcode_80();
        case 0x81: return Opcode_81();
        case 0x82: return Opcode_82();
        case 0x83: return Opcode_83();
        case 0x84: return Opcode_84();
        case 0x85: return Opcode_85();
        case 0x86: return Opcode_86();
        case 0x87: return Opcode_87();
        case 0x88: return Opcode_88();
        case 0x89: return Opcode_89();
        case 0x8A: return Opcode_8A();
        case 0x8B: return Opcode_8B();
        case 0x8C: return Opcode_8C();
        case 0x8D: return Opcode_8D();
        case 0x8E: return Opcode_8E();
        case 0x8F: return Opcode_8F();
        case 0x90: return Opcode_90();
        case 0x91: return Opcode_91();
        case 0x92: return Opcode_92();
        case 0x93: return Opcode_93();
        case 0x94: return Opcode_94();
        case 0x95: return Opcode_95();
        case 0x96: return Opcode_96();
        case 0x97: return Opcode_97();
        case 0x98: return Opcode_98();
        case 0x99: return Opcode_99();
        case 0x9A: return Opcode_9A();
        case 0x9B: return Opcode_9B();
        case 0x9C: return Opcode_9C();
        case 0x9D: return Opcode_9D();
        case 0x9E: return Opcode_9E();
        case 0x9F: return Opcode_9F();
        case 0xA0: return Opcode_A0();
        case 0xA1: return Opcode_A1();
        case 0xA2: return Opcode_A2();
        case 0xA3: return Opcode_A3();
        case 0xA4: return Opcode_A4();
        case 0xA5: return Opcode_A5();
        case 0xA6: return Opcode_A6();
        case 0xA7: return Opcode_A7();
        case 0xA8: return Opcode_A8();
        case 0xA9: return Opcode_A9();
        case 0xAA: return Opcode_AA();
        case 0xAB: return Opcode_AB();
        case 0xAC: return Opcode_AC();
        case 0xAD: return Opcode_AD();
        case 0xAE: return Opcode_AE();
        case 0xAF: return Opcode_AF();
        case 0xB0: return Opcode_B0();
        case 0xB1: return Opcode_B1();
        case 0xB2: return Opcode_B2();
        case 0xB3: return Opcode_B3();
        case 0xB4: return Opcode_B4();
        case 0xB5: return Opcode_B5();
        case 0xB6: return Opcode_B6();
        case 0xB7: return Opcode_B7();
        case 0xB8: return Opcode_B8();
        case 0xB9: return Opcode_B9();
        case 0xBA: return Opcode_BA();
        case 0xBB: return Opcode_BB();
        case 0xBC: return Opcode_BC();
        case 0xBD: return Opcode_BD();
        case 0xBE: return Opcode_BE();
        case 0xBF: return Opcode_BF();
        case 0xC0: return Opcode_C0();
        case 0xC1: return Opcode_C1();
        case 0xC2: return Opcode_C2();
        case 0xC3: return Opcode_C3();
        case 0xC4: return Opcode_C4();
        case 0xC5: return Opcode_C5();
        case 0xC6: return Opcode_C6();
        case 0xC7: return Opcode_C7();
        case 0xC8: return Opcode_C8();
        case 0xC9: return Opcode_C9();
        case 0xCA: return Opcode_CA();
        case 0xCB: return Opcode_CB();
        case 0xCC: return Opcode_CC();
        case 0xCD: return Opcode_CD();
        case 0xCE: return Opcode_CE();
        case 0xCF: return Opcode_CF();
        case 0xD0: return Opcode_D0();
        case 0xD1: return Opcode_D1();
        case 0xD2: return Opcode_D2();
        case 0xD3: return Opcode_D3();
        case 0xD4: return Opcode_D4();
        case 0xD5: return Opcode_D5();
        case 0xD6: return Opcode_D6();
        case 0xD7: return Opcode_D7();
        case 0xD8: return Opcode_D8();
        case 0xD9: return Opcode_D9();
        case 0xDA: return Opcode_DA();
        case 0xDB: return Opcode_DB();
        case 0xDC: return Opcode_DC();
        case 0xDD: return Opcode_DD();
        case 0xDE: return Opcode_DE();
        case 0xDF: return Opcode_DF();
        case 0xE0: return Opcode_E0();
        case 0xE1: return Opcode_E1();
        case 0xE2: return Opcode_E2();
        case 0xE3: return Opcode_E3();
        case 0xE4: return Opcode_E4();
        case 0xE5: return Opcode_E5();
        case 0xE6: return Opcode_E6();
        case 0xE7: return Opcode_E7();
        case 0xE8: return Opcode_E8();
        case 0xE9: return Opcode_E9();
        case 0xEA: return Opcode_EA();
        case 0xEB: return Opcode_EB();
        case 0xEC: return Opcode_EC();
        case 0xED: return Opcode_ED();
        case 0xEE: return Opcode_EE();
        case 0xEF: return Opcode_EF();
        case 0xF0: return Opcode_F0();
        case 0xF1: return Opcode_F1();
        case 0xF2: return Opcode_F2();
        case 0xF3: return Opcode_F3();
        case 0xF4: return Opcode_F4();
        case 0xF5: return Opcode_F5();
        case 0xF6: return Opcode_F6();
        case 0xF7: return Opcode_F7();
        case 0xF8: return Opcode_F8();
        case 0xF9: return Opcode_F9();
        case 0xFA: return Opcode_FA();
        case 0xFB: return Opcode_FB();
        case 0xFC: return Opcode_FC();
        case 0xFD: return Opcode_FD();
        case 0xFE: return Opcode_FE();
        case 0xFF: return Opcode_FF();
        default: return false;
    }
}

void Cpu_::ExecuteEx(const u8 opcode) {
    switch (opcode) {
        case 0x00: return Opcode_CB_00();
        case 0x01: return Opcode_CB_01();
        case 0x02: return Opcode_CB_02();
        case 0x03: return Opcode_CB_03();
        case 0x04: return Opcode_CB_04();
        case 0x05: return Opcode_CB_05();
        case 0x06: return Opcode_CB_06();
        case 0x07: return Opcode_CB_07();
        case 0x08: return Opcode_CB_08();
        case 0x09: return Opcode_CB_09();
        case 0x0A: return Opcode_CB_0A();
        case 0x0B: return Opcode_CB_0B();
        case 0x0C: return Opcode_CB_0C();
        case 0x0D: return Opcode_CB_0D();
        case 0x0E: return Opcode_CB_0E();
        case 0x0F: return Opcode_CB_0F();
        case 0x10: return Opcode_CB_10();
        case 0x11: return Opcode_CB_11();
        case 0x12: return Opcode_CB_12();
        case 0x13: return Opcode_CB_13();
        case 0x14: return Opcode_CB_14();
        case 0x15: return Opcode_CB_15();
        case 0x16: return Opcode_CB_16();
        case 0x17: return Opcode_CB_17();
        case 0x18: return Opcode_CB_18();
        case 0x19: return Opcode_CB_19();
        case 0x1A: return Opcode_CB_1A();
        case 0x1B: return Opcode_CB_1B();
        case 0x1C: return Opcode_CB_1C();
        case 0x1D: return Opcode_CB_1D();
        case 0x1E: return Opcode_CB_1E();
        case 0x1F: return Opcode_CB_1F();
        case 0x20: return Opcode_CB_20();
        case 0x21: return Opcode_CB_21();
        case 0x22: return Opcode_CB_22();
        case 0x23: return Opcode_CB_23();
        case 0x24: return Opcode_CB_24();
        case 0x25: return Opcode_CB_25();
        case 0x26: return Opcode_CB_26();
        case 0x27: return Opcode_CB_27();
        case 0x28: return Opcode_CB_28();
        case 0x29: return Opcode_CB_29();
        case 0x2A: return Opcode_CB_2A();
        case 0x2B: return Opcode_CB_2B();
        case 0x2C: return Opcode_CB_2C();
        case 0x2D: return Opcode_CB_2D();
        case 0x2E: return Opcode_CB_2E();
        case 0x2F: return Opcode_CB_2F();
        case 0x30: return Opcode_CB_30();
        case 0x31: return Opcode_CB_31();
        case 0x32: return Opcode_CB_32();
        case 0x33: return Opcode_CB_33();
        case 0x34: return Opcode_CB_34();
        case 0x35: return Opcode_CB_35();
        case 0x36: return Opcode_CB_36();
        case 0x37: return Opcode_CB_37();
        case 0x38: return Opcode_CB_38();
        case 0x39: return Opcode_CB_39();
        case 0x3A: return Opcode_CB_3A();
        case 0x3B: return Opcode_CB_3B();
        case 0x3C: return Opcode_CB_3C();
        case 0x3D: return Opcode_CB_3D();
        case 0x3E: return Opcode_CB_3E();
        case 0x3F: return Opcode_CB_3F();
        case 0x40: return Opcode_CB_40();
        case 0x41: return Opcode_CB_41();
        case 0x42: return Opcode_CB_42();
        case 0x43: return Opcode_CB_43();
        case 0x44: return Opcode_CB_44();
        case 0x45: return Opcode_CB_45();
        case 0x46: return Opcode_CB_46();
        case 0x47: return Opcode_CB_47();
        case 0x48: return Opcode_CB_48();
        case 0x49: return Opcode_CB_49();
        case 0x4A: return Opcode_CB_4A();
        case 0x4B: return Opcode_CB_4B();
        case 0x4C: return Opcode_CB_4C();
        case 0x4D: return Opcode_CB_4D();
        case 0x4E: return Opcode_CB_4E();
        case 0x4F: return Opcode_CB_4F();
        case 0x50: return Opcode_CB_50();
        case 0x51: return Opcode_CB_51();
        case 0x52: return Opcode_CB_52();
        case 0x53: return Opcode_CB_53();
        case 0x54: return Opcode_CB_54();
        case 0x55: return Opcode_CB_55();
        case 0x56: return Opcode_CB_56();
        case 0x57: return Opcode_CB_57();
        case 0x58: return Opcode_CB_58();
        case 0x59: return Opcode_CB_59();
        case 0x5A: return Opcode_CB_5A();
        case 0x5B: return Opcode_CB_5B();
        case 0x5C: return Opcode_CB_5C();
        case 0x5D: return Opcode_CB_5D();
        case 0x5E: return Opcode_CB_5E();
        case 0x5F: return Opcode_CB_5F();
        case 0x60: return Opcode_CB_60();
        case 0x61: return Opcode_CB_61();
        case 0x62: return Opcode_CB_62();
        case 0x63: return Opcode_CB_63();
        case 0x64: return Opcode_CB_64();
        case 0x65: return Opcode_CB_65();
        case 0x66: return Opcode_CB_66();
        case 0x67: return Opcode_CB_67();
        case 0x68: return Opcode_CB_68();
        case 0x69: return Opcode_CB_69();
        case 0x6A: return Opcode_CB_6A();
        case 0x6B: return Opcode_CB_6B();
        case 0x6C: return Opcode_CB_6C();
        case 0x6D: return Opcode_CB_6D();
        case 0x6E: return Opcode_CB_6E();
        case 0x6F: return Opcode_CB_6F();
        case 0x70: return Opcode_CB_70();
        case 0x71: return Opcode_CB_71();
        case 0x72: return Opcode_CB_72();
        case 0x73: return Opcode_CB_73();
        case 0x74: return Opcode_CB_74();
        case 0x75: return Opcode_CB_75();
        case 0x76: return Opcode_CB_76();
        case 0x77: return Opcode_CB_77();
        case 0x78: return Opcode_CB_78();
        case 0x79: return Opcode_CB_79();
        case 0x7A: return Opcode_CB_7A();
        case 0x7B: return Opcode_CB_7B();
        case 0x7C: return Opcode_CB_7C();
        case 0x7D: return Opcode_CB_7D();
        case 0x7E: return Opcode_CB_7E();
        case 0x7F: return Opcode_CB_7F();
        case 0x80: return Opcode_CB_80();
        case 0x81: return Opcode_CB_81();
        case 0x82: return Opcode_CB_82();
        case 0x83: return Opcode_CB_83();
        case 0x84: return Opcode_CB_84();
        case 0x85: return Opcode_CB_85();
        case 0x86: return Opcode_CB_86();
        case 0x87: return Opcode_CB_87();
        case 0x88: return Opcode_CB_88();
        case 0x89: return Opcode_CB_89();
        case 0x8A: return Opcode_CB_8A();
        case 0x8B: return Opcode_CB_8B();
        case 0x8C: return Opcode_CB_8C();
        case 0x8D: return Opcode_CB_8D();
        case 0x8E: return Opcode_CB_8E();
        case 0x8F: return Opcode_CB_8F();
        case 0x90: return Opcode_CB_90();
        case 0x91: return Opcode_CB_91();
        case 0x92: return Opcode_CB_92();
        case 0x93: return Opcode_CB_93();
        case 0x94: return Opcode_CB_94();
        case 0x95: return Opcode_CB_95();
        case 0x96: return Opcode_CB_96();
        case 0x97: return Opcode_CB_97();
        case 0x98: return Opcode_CB_98();
        case 0x99: return Opcode_CB_99();
        case 0x9A: return Opcode_CB_9A();
        case 0x9B: return Opcode_CB_9B();
        case 0x9C: return Opcode_CB_9C();
        case 0x9D: return Opcode_CB_9D();
        case 0x9E: return Opcode_CB_9E();
        case 0x9F: return Opcode_CB_9F();
        case 0xA0: return Opcode_CB_A0();
        case 0xA1: return Opcode_CB_A1();
        case 0xA2: return Opcode_CB_A2();
        case 0xA3: return Opcode_CB_A3();
        case 0xA4: return Opcode_CB_A4();
        case 0xA5: return Opcode_CB_A5();
        case 0xA6: return Opcode_CB_A6();
        case 0xA7: return Opcode_CB_A7();
        case 0xA8: return Opcode_CB_A8();
        case 0xA9: return Opcode_CB_A9();
        case 0xAA: return Opcode_CB_AA();
        case 0xAB: return Opcode_CB_AB();
        case 0xAC: return Opcode_CB_AC();
        case 0xAD: return Opcode_CB_AD();
        case 0xAE: return Opcode_CB_AE();
        case 0xAF: return Opcode_CB_AF();
        case 0xB0: return Opcode_CB_B0();
        case 0xB1: return Opcode_CB_B1();
        case 0xB2: return Opcode_CB_B2();
        case 0xB3: return Opcode_CB_B3();
        case 0xB4: return Opcode_CB_B4();
        case 0xB5: return Opcode_CB_B5();
        case 0xB6: return Opcode_CB_B6();
        case 0xB7: return Opcode_CB_B7();
        case 0xB8: return Opcode_CB_B8();
        case 0xB9: return Opcode_CB_B9();
        case 0xBA: return Opcode_CB_BA();
        case 0xBB: return Opcode_CB_BB();
        case 0xBC: return Opcode_CB_BC();
        case 0xBD: return Opcode_CB_BD();
        case 0xBE: return Opcode_CB_BE();
        case 0xBF: return Opcode_CB_BF();
        case 0xC0: return Opcode_CB_C0();
        case 0xC1: return Opcode_CB_C1();
        case 0xC2: return Opcode_CB_C2();
        case 0xC3: return Opcode_CB_C3();
        case 0xC4: return Opcode_CB_C4();
        case 0xC5: return Opcode_CB_C5();
        case 0xC6: return Opcode_CB_C6();
        case 0xC7: return Opcode_CB_C7();
        case 0xC8: return Opcode_CB_C8();
        case 0xC9: return Opcode_CB_C9();
        case 0xCA: return Opcode_CB_CA();
        case 0xCB: return Opcode_CB_CB();
        case 0xCC: return Opcode_CB_CC();
        case 0xCD: return Opcode_CB_CD();
        case 0xCE: return Opcode_CB_CE();
        case 0xCF: return Opcode_CB_CF();
        case 0xD0: return Opcode_CB_D0();
        case 0xD1: return Opcode_CB_D1();
        case 0xD2: return Opcode_CB_D2();
        case 0xD3: return Opcode_CB_D3();
        case 0xD4: return Opcode_CB_D4();
        case 0xD5: return Opcode_CB_D5();
        case 0xD6: return Opcode_CB_D6();
        case 0xD7: return Opcode_CB_D7();
        case 0xD8: return Opcode_CB_D8();
        case 0xD9: return Opcode_CB_D9();
        case 0xDA: return Opcode_CB_DA();
        case 0xDB: return Opcode_CB_DB();
        case 0xDC: return Opcode_CB_DC();
        case 0xDD: return Opcode_CB_DD();
        case 0xDE: return Opcode_CB_DE();
        case 0xDF: return Opcode_CB_DF();
        case 0xE0: return Opcode_CB_E0();
        case 0xE1: return Opcode_CB_E1();
        case 0xE2: return Opcode_CB_E2();
        case 0xE3: return Opcode_CB_E3();
        case 0xE4: return Opcode_CB_E4();
        case 0xE5: return Opcode_CB_E5();
        case 0xE6: return Opcode_CB_E6();
        case 0xE7: return Opcode_CB_E7();
        case 0xE8: return Opcode_CB_E8();
        case 0xE9: return Opcode_CB_E9();
        case 0xEA: return Opcode_CB_EA();
        case 0xEB: return Opcode_CB_EB();
        case 0xEC: return Opcode_CB_EC();
        case 0xED: return Opcode_CB_ED();
        case 0xEE: return Opcode_CB_EE();
        case 0xEF: return Opcode_CB_EF();
        case 0xF0: return Opcode_CB_F0();
        case 0xF1: return Opcode_CB_F1();
        case 0xF2: return Opcode_CB_F2();
        case 0xF3: return Opcode_CB_F3();
        case 0xF4: return Opcode_CB_F4();
        case 0xF5: return Opcode_CB_F5();
        case 0xF6: return Opcode_CB_F6();
        case 0xF7: return Opcode_CB_F7();
        case 0xF8: return Opcode_CB_F8();
        case 0xF9: return Opcode_CB_F9();
        case 0xFA: return Opcode_CB_FA();
        case 0xFB: return Opcode_CB_FB();
        case 0xFC: return Opcode_CB_FC();
        case 0xFD: return Opcode_CB_FD();
        case 0xFE: return Opcode_CB_FE();
        case 0xFF: return Opcode_CB_FF();
        default: return;
    }
}

}
